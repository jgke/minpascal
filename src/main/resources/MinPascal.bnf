S ::= Program
Program ::= program identifier semicolon Block dot
Block ::= begin Statement (semicolon [Statement])* end
Statement ::= SimpleStatement | StructuredStatement | Declaration

SimpleStatement ::= identifier IdentifierStatement
                    | ReturnStatement
                    | ReadStatement
                    | WriteStatement
                    | AssertStatement
IdentifierStatement ::= AssignmentStatement | Call
ReturnStatement ::= return Expression
ReadStatement ::= read op [ReadVariable (comma ReadVariable)*] cp
ReadVariable ::= identifier [ob Expression cb]
WriteStatement ::= write Arguments
AssertStatement ::= assert op Expression cp
AssignmentStatement ::= [ob Expression cb] assign Expression
Call ::= Arguments

StructuredStatement ::= Block | If | While
If ::= if Expression then Statement [else Statement]
While ::= while Expression do Statement

Declaration ::= VarDeclaration | ProcedureDeclaration | FunctionDeclaration
VarDeclaration ::= var identifier (comma identifier)* colon Type
Type ::= SimpleType | ArrayType
SimpleType ::= type
ArrayType ::= array ob Expression cb of SimpleType
ProcedureDeclaration ::= procedure identifier Parameters semicolon Block
FunctionDeclaration ::= function identifier Parameters colon Type semicolon Block
Parameters ::= op [Parameter (comma Parameter)*] cp
Parameter ::= [var] identifier colon Type

Arguments ::= op [Expression (comma Expression)*] cp
Expression ::= SimpleExpression [RelOp SimpleExpression]
SimpleExpression ::= [Sign] Term [AddOp Term]
Term ::= Factor [MulOp Factor]
Factor ::= SubFactor [SizeExpression]
SubFactor ::= Variable [Call]
             | Literal
             | op Expression cp
             | not Factor
Variable ::= identifier [ob Expression cb]
SizeExpression ::= dot size
Literal ::= realliteral | integerliteral | stringliteral | true | false

RelOp ::= equals | notequals | lessthan | lessthanequals | morethan | morethanequals
Sign ::= plus | minus
AddOp ::= plus | minus | or
MulOp ::= times | divide | mod | and

and ::= 'and'
array ::= 'array'
assert ::= 'assert'
assign ::= ':='
begin ::= 'begin'
cb ::= ']'
colon ::= ':'
comma ::= ','
cp ::= ')'
divide ::= '/'
do ::= 'do'
dot ::= '.'
else ::= 'else'
end ::= 'end'
equals ::= '=='
false ::= 'false'
function ::= 'function'
identifier ::= !keyword identifierregex
identifierregex ::= "[a-zA-Z]+"
keyword ::= or | and | not | if | then | else | of | while | do
          | begin | end | var | array | procedure | function
          | program | assert | return
if ::= 'if'
integerliteral ::= "[0-9]+"
lessthan ::= '<'
lessthanequals ::= '<='
minus ::= '-'
mod ::= '%'
morethan ::= '>'
morethanequals ::= '>='
not ::= '!'
notequals ::= '<>'
ob ::= '['
of ::= 'of'
op ::= '('
or ::= 'or'
plus ::= '+'
procedure ::= 'procedure'
program ::= 'program'
read ::= 'read'
realliteral ::= "[0-9]+\.[0-9]*"
return ::= 'return'
semicolon ::= ';'
size ::= 'size'
stringliteral ::= ""([^"\\]|\\.)*""
then ::= 'then'
times ::= '*'
true ::= 'true'
type ::= int | str
int ::= 'integer'
str ::= 'string'
var ::= 'var'
while ::= 'while'
write ::= 'write'

whitespace ::= (comment | ws)*
comment ::= "\{\*.*?\*\}"
ws ::= " +"
